[ { "title": "Built-in types in Typescript", "url": "/posts/typescript-types/", "categories": "frontend", "tags": "typescript, built-in types, types", "date": "2023-06-21 15:41:00 +1000", "snippet": " Built-in Types in Typescript The “any” type Arrays Tuples Enum Functions A void function A function that returns a number A function that takes optional parameter. Built-in Types in TypescriptThe “any” typeIf you declare but don’t initialise to anything, it becomes “any” typelet someValue;This “any” type can be assigned to anything, but it is not recommended to use “any” type because it defeats purpose of TypescriptsomeValue = 1;console.log(someValue); // =&amp;gt; 1someValue = &quot;Typescript&quot;;console.log(someValue); // =&amp;gt; &#39;Typescript&#39;Arrayslet numbersArray: number[] = [1, 2, 3]; // Explicit declarationlet numbersArray1 = [1, 2, 3]; // Implicit declarationWhen declaring empty array, you must explicitly declare the type. Otherwise it becomes “any” type arraylet emptyArray:number[] = []// Example functionlet numbersArray3: number[] = [1, 2, 3, 4, 5];let logValue = () =&amp;gt; { numbersArray3.forEach((n) =&amp;gt; { if (n &amp;lt; 4) console.log(n); else console.log(n.toExponential(2)); });};logValue();TuplesA Fixed type array, used for assigning key/value pairs mostly.It is a single variable name, but has multiple types in the array, unlike tuples in other languages (c#) where each value in a tuple has its own variable name// Declarationlet user: [number, string] = [33, &quot;Arun&quot;];Typescript is smart enough to understand each value’s type, so we can perform appropriate actions on them. For example, the following is valid.user[0].toFixed(1);user[1].toLower();The following code will throw error since the first value is defined as number, and hence any string specific operations are not possible.user[0].toLower(); // throws &#39;Property &#39;toLower&#39; does not exist on type &#39;number&#39;.ts(2339)&#39;EnumEnums are a set of named constants. enum Variable name should be in PascalCase, and so are its keys.// Declarationenum ShirtSize { Small, Medium, Large,} By default, the first key in an enum gets assigned 0 as the value. But it can be changed In the declaration below, we assign Small as 1, and the compiler will automatically assign 2 and 3 for Medium / Large enum ShirtSize1 {Small = 1,Medium,Large,} If we need to assign any other value other than number, we need to explicitly declare for each key in enumenum ShirtSizeWithStringValues { Small = &quot;s&quot;, Medium = &quot;m&quot;, Large = &quot;l&quot;,}// Usageconsole.log(ShirtSize.Small); // =&amp;gt; 0console.log(ShirtSize1.Medium); // =&amp;gt; 2console.log(ShirtSizeWithStringValues.Large); // =&amp;gt; &#39;l&#39;FunctionsFunction is a block of code that does performs a.. function. They form the building block of any programming languageA void functionfunction calculateTaxReturn(income: number) { if (income &amp;lt; 10_000) console.log(income * 2.3); else console.log(income * 1.5);}A function that returns a number It is highly recommended to specify the return type in function declarationfunction calculateTaxReturn1(income: number): number { if (income &amp;lt; 10_000) return income * 2.3; else return income * 1.5;}A function that takes optional parameter. The second param is optional in the following examplefunction calculateTaxReturnWithOptionalParam( income: number, taxOffset = 10_000): number { if (taxOffset &amp;lt; 10_000) return income * 2.3; else return income * 1.5;}let taxReturn = calculateTaxReturnWithOptionalParam(2000); // 2000 for income &amp;amp; default 10_000 for taxOffsetlet taxReturn1 = calculateTaxReturnWithOptionalParam(200_000, 3000); // 200_000 for income &amp;amp; 3000 as taxOffset" }, { "title": "Singleton - Creational design pattern", "url": "/posts/Singleton/", "categories": "design_patterns", "tags": "singleton, creational, design, patterns, design patterns, c#, c# 10", "date": "2023-04-05 13:43:47 +1000", "snippet": "Table of contents SingletonSingletonThe intent of singleton patterns is to ensure that at any given time a class has only one instance and to provide a global point of access to it" }, { "title": "Design Patterns using C# 10", "url": "/posts/design-patterns-using-c-10/", "categories": "design_patterns", "tags": "design, patterns, design patterns, c#, c# 10", "date": "2023-04-05 13:23:47 +1000", "snippet": "Table of Contents Design patterns Creational patterns Structural patterns Behavioral patterns Design patternsWe will be covering the design patterns set forth by the Gang of Four (GoF). There are around 23 patterns divided in to 3 categories, namely Creational Structural BehavioralIn this post, we will look at each of these patterns to understand what they are, when to use them, pros and cons along with real coding examples using C#10.Creational patternsThese patterns help make the system independent of how its objects are being created, composed or structured. The following are the 5 creational patterns Singleton Factory Abstract Factory Builder PrototypeStructural patternsThese patterns concerns with how classes and objects are composed to form large complex structures. Think about inheritance and composition. There are 7 structural patterns Adapter Composite Proxy Flyweight Facade Bridge DecoratorBehavioral patternsThese patterns deal with the control-flow of the project which could be hard to navigate during the runtime. These patterns helps us focus on the way objects are interconnected. Think about loose coupling, extensibility etc. There are 11 behavioral patterns in total. Template method Mediator Chain of responsibility Observer Strategy Command State Visitor Interpretor Iterator Memento" }, { "title": "gRPC Basic concepts", "url": "/posts/gRPC-concepts/", "categories": "rpc", "tags": "rpc, grpc, proto, authentication, message types, grpc concept, unary, auth", "date": "2021-09-30 01:03:47 +1000", "snippet": "Table of contents Basic components in gRPC A sample proto file RPC Lifecycle Message Types Authentication optionsBasic components in gRPCAs with most interservice communications, gRPC supports the concept of clients and servers. There are no restrictions on the number of client/servers and how they are interconnected but the difference happens in the way they communicate with each other. Generally on a REST based implementation, the server (let’s say an API) would expose its API endpoints and the clients usually make a HTTP request to those endpoints. But in gRPC, the API would instead define all the contracts in a protobuf file (example.proto) generate gRPC code when the project is built (or an equivalent approach for dynamic languages)Similarly, the client would define its own messages in a protobuf files. The client side protobuf files usually deal with preparing to send a message that the server understands, receiving a response and serialising/deserialising them etc which are all abstracted away, thanks to the protobuf layer. Finally, all the client needs to do is to call the relevent method on server to get a response.As of this writing, there are a few experimental alternatives for protobuf in C#, such as using JSON Web APIs / HTTP REST endpoint style instead. More details can be found here   A sample proto fileCheckout a sample proto file that defines a contract for GreeterApi that has one method titled SayHello. This method takes in a HelloRequest as parameter and responds with HelloReply, both of which are again defined as messages in the file. When we build this code, it generates a gRPC code in the same language in which it is being built by default (or we can specify the language to build this to in options).syntax = &quot;proto3&quot;;service GreeterApi { rpc SayHello (HelloRequest) returns (HelloReply);}message HelloRequest { string name = 1;}message HelloReply { string message = 1;}   RPC LifecycleWe saw how protobuf generates code for us, which is in turn used to communicate with client/server. But how does the client or server initiate the connection with each other? Normally for REST API requests in C#, we can create a HttpClient and use that to send/receive requests such as client.SendAsync(). In gRPC it is slightly more complex than that: Create a channel This opens up the connection to the API / server Create a client This is the client that will call the RPC methods generated by gRPC This client can be reused and may need to be initialised only once during the lifecycle of the application Client sends a Request (with optional metadata), and server can send a metadata response This happens even before the actual request is processed by the server Useful in situations such as Authentication Once the server has processed the request, it sends back a response   Message TypesThere are 4 types of messages that can be communicated with gRPC protocol: Unary (single request from client, single response from server) protobuf syntax: rpc MethodName(RequestType) returns (ResponseType) Server Streaming RPC (single request from client, multiple responses from server) protobuf syntax: rpc MethodName(RequestType) returns (stream ResponseType) Used in situations like video streaming where a client makes a single request, and server responds with buffered stream of video Client Streaming RPC (multiple requests from client, single request from server) protobuf syntax: rpc MethodName(stream RequestType) returns (ResponseType) Used in situations such as client needing to send a multi-part upload to server Bi-directional Streaming (multiple requests from client and server, asynchronously) protobuf syntax: rpc MethodName(stream RequestType) returns (stream ResponseType) More complex, suited for custom scenarios that require multiple asnchronous requests/response as a stream    Authentication optionsAuthentication here deals with how the client grpc authenticates and connects with the server, so do not confuse with general user authentication. gRPC again supports 5 types of authentication: Insecure authentication Really this should only be used in dev environments for testing purposes SSL/TLS This is the recommended level of authentication for gRPC Makes use of HTTP/2 connection by default when available Certificate is validated against the nominated trusted CA ALTS (Application Layer Transport Security) Specific for Google cloud platform (GCP) Google token-based This requires SSL/TLS to work, so an added layer of security when using Google token based authentication Custom gRPC also allows custom implementation of authentication, such as OAUTH2.0. There are several packages that support custom implementations which can be found in gRPC’s website. " }, { "title": "Introduction to RPC (and to an extent gRPC)", "url": "/posts/intro-to-rpc-and-gRPC/", "categories": "rpc", "tags": "rpc, grpc, rest, api, protocol, protobuf, proto", "date": "2021-09-27 21:42:47 +1000", "snippet": "Table of contents Introduction to RPC (and to an extent gRPC) What are Interservice communications? Interservice communication options REST vs RPC gRPC Introduction to RPC (and to an extent gRPC)I’ve always worked with REST APIs at work, in my personal projects etc. Whenever I wanted to build an API, I never even had to think twice about a different stratgey until now. I’ve read about RPCs at university, seen some examples and hear people talk about gRPC sometimes, but I never took took it seriously so far. So this is me trying to learn more about it, document my learnings so I can come back at a later stage and still remember what the heck gRPC is all about!If you have a subscription to Pluralsight, this course has great explanations for most of the gRPC stuff I’ve discussed below.What are Interservice communications?In our current technology landscape, it is quite popular to split a product into smaller services and have them be independant of each other. In other words, we prefer microservices architeture where possible. The benefits of such architecture are many and not in scope of this post. But what is in scope is the way we communicate between these services to get resources or perform some actions.With microservice architecture comes the freedom to choose the best programming language for a particular service. Let’s say as an example I have the following architecture: APIs hosted in EKS written in C# Identity service for Auth, written in Go A couple of lambdas behind an API gateway written in python and JavaScript     Interservice communication optionsFor an architecture written in multiple languages such as above, there are two simple ways enable communication between them: Resource based communication via HTTP (REST) Action based communication via Remote Procedure Calls (RPC)          REST vs RPCI’ve tried to summarise some very basic differences between REST and RPC below S.No REST (REpresenational State Transfer) RPC (Remote Procedure Call) 1. Resource based communication Action based communication 2. Loosely coupled between client, server and services Tightly coupled - The caller must know both the method to call and all the response to expect 3. Embraces HTTP semantics (GET product/123) Embraces programming semantics (function call such as client.getProduct(ProductDetails)) 4. Text based messaging Binary based messaging, hence much more efficient and faster      gRPCgRPC, as you might have guessed, was developed by Google based on their internal tool called Stubby which they created to make interservice communication within Google products faster and efficient. Touching on some highlights about gRPC below: Cross-platform support Supports a wide variety of languages (C++, Java, C#, Go, Python, Ruby to name a few) Supports Streaming content aggregate multi-part requests and provide a single response or send a stream of responses for a single request (video streaming, for example) Layered framework The gRPC framerwork is isolated from the transport protocol This enables to update gRPC framework andtTransport protocols independantly of each other This also means that it is asy to replace the default transport protocol of gRPC from protobuf to something else like json Exposes API via protobuf files Generates gRPC code based on protobuf files as we build a project. These generated code enables a client to call gRPC method natively as if it was written in the same language" }, { "title": "SQL insert statement", "url": "/posts/sql-insert/", "categories": "sql", "tags": "sql, insert, insert into, sql server, mssql", "date": "2021-09-16 23:04:47 +1000", "snippet": "SQL statements are one of those things that I have at the tip of my tongue (or brain) but can never get them right the first go! So I am going to just write down the syntaxes, examples and some variations of SQL statements that I usually work with. To start with, lets look at insert statement in SQL ServerUserHobbies tableLet’s say I have the following table named UserHobbies where the datatype of UserId is UNIQUEIDENTIFIER while the other columns are varchar(150) UserId HobbyType HobbyDescription 0836688e-08b8-4396-af38-7756d3d7bb63 Read Book Harry Potter Series I want to insert a new row of data. So how would I go about it?Option 1 - Insert into ALL columns of a tableSyntaxinsert into &amp;lt;table_name&amp;gt;values (col_1_value, col_2_value, ...)Exampleinsert into UserHobbiesvalues (&#39;92a96667-14d2-4e29-9260-838a905ed5ab&#39;, &#39;Sports&#39;, &#39;Play cricket on weekends&#39;)  This would result in the UserHobbies table to have the following data: UserId HobbyType HobbyDescription 0836688e-08b8-4396-af38-7756d3d7bb63 Read Book Harry Potter Series 92a96667-14d2-4e29-9260-838a905ed5ab Sports Play cricket on weekends   It is all well and good when you have data for all the columns! But what if you did not have some information when you insert into the table?If the column does not require a value to be present, I could just add null to that respective value as follows:insert into UserHobbiesvalues (&#39;29b24989-66b9-4b0f-9521-a0c495af1d2d&#39;, null ,&#39;Does not have a hobby&#39;) UserId HobbyType HobbyDescription 0836688e-08b8-4396-af38-7756d3d7bb63 Read Book Harry Potter Series 92a96667-14d2-4e29-9260-838a905ed5ab Sports Play cricket on weekends 29b24989-66b9-4b0f-9521-a0c495af1d2d NULL Does not have a hobby   Option 2- Insert into select columns of a tableSometime you might have a table that auto-increments the id or calculates value for a particular column automatically.Or you might find that certain columns take null value and you may not need to provide values for all the columns.In such cases, you could try insert data into select few columns only as follows:Syntaxinsert into &amp;lt;table_name&amp;gt; (col_1_name, col_2_name)values (col_1_value, col_2_value)Exampleinsert into UserHobbies (UserId, HobbyType)values (&#39;c7f79983-9310-4a5c-9a8d-40b24e13e4b0&#39;, &#39;Sleep&#39;)   Executing the above would result in the following table: UserId HobbyType HobbyDescription 0836688e-08b8-4396-af38-7756d3d7bb63 Read Book Harry Potter Series 92a96667-14d2-4e29-9260-838a905ed5ab Sports Play cricket on weekends 29b24989-66b9-4b0f-9521-a0c495af1d2d NULL Does not have a hobby c7f79983-9310-4a5c-9a8d-40b24e13e4b0 Sleep NULL    Note:Even though the UserId is UNIQUEIDENTIFIER, when we do an insert, we wrap it around quotes as a string. Internally MSSQL tries to convert the string into a uniqueidentifier. If you provided an invalid GUID, it will throw a conversion error such as Conversion failed when converting from a character string to uniqueidentifier." }, { "title": "Welcome to Nura Dev!", "url": "/posts/welcome-to-nura-dev/", "categories": "welcome", "tags": "welcome", "date": "2021-08-30 23:07:47 +1000", "snippet": "How great is your memory?I&#39;ll make a goldfish proud - That is (unfortunately) my mottoIf you don’t work on a particular technology for a while (like a few hours or days), do you forget everything related to it? Well I do, and in the process of figuring out a best way to recall the concepts / code / patterns I have created nura.dev.At Nura, I’ll try to: Explain concepts like I would do a 5 year old (ELI5) or to the current year Arun (too old, don’t ask) Write down small code blocks that I can re-use in general Add some blog posts of things I learn or experiment in generalI’ve done the hard part of creating this website! Now on to harder stuff - writing posts!Psst[0]: If you are wondering what nura means, its just my first name in reverse!Psst[1]: Did you know this website has a nice Search feature at the top right corner? Give it a whirl!" } ]
